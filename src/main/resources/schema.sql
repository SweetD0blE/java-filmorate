DROP TABLE IF EXISTS rating CASCADE;
CREATE TABLE rating
(
    rating_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name      varchar(50),
    description varchar(100)
);
DROP TABLE IF EXISTS films CASCADE;
CREATE TABLE films
(
    film_id      INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name         varchar(20) NOT NULL CHECK (name <> ''),
    description  varchar(200),
    release_date date        NOT NULL CHECK (release_date >= '1895-12-28' AND release_date <= CURRENT_DATE),
    duration     INTEGER     NOT NULL,
    rating_id    INTEGER REFERENCES rating (rating_id) ON DELETE NO ACTION
);

DROP TABLE IF EXISTS users CASCADE;
CREATE TABLE users
(
    user_id  INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    birthday date         NOT NULL CHECK (birthday <= CURRENT_DATE),
    login    varchar(100) NOT NULL,
    email    varchar(50)  NOT NULL UNIQUE,
    name     varchar(100) NOT NULL
);

DROP TABLE IF EXISTS friendships CASCADE;
CREATE TABLE friendships
(
    user_id int,
    friend_id int,
    status boolean DEFAULT FALSE,
    PRIMARY KEY (user_id, friend_id)
);

DROP TABLE IF EXISTS genre CASCADE;
CREATE TABLE genre
(
    genre_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name     varchar(50) NOT NULL
);

DROP TABLE IF EXISTS film_genre CASCADE;
CREATE TABLE film_genre
(
    film_id  INTEGER REFERENCES films (film_id) ON DELETE CASCADE,
    genre_id INTEGER REFERENCES genre (genre_id) ON DELETE CASCADE,
    PRIMARY KEY (film_id, genre_id)
);

DROP TABLE IF EXISTS likes CASCADE;
CREATE TABLE likes
(
    film_id INTEGER REFERENCES films (film_id) ON DELETE CASCADE,
    user_id INTEGER REFERENCES users (user_id) ON DELETE CASCADE,
    PRIMARY KEY (film_id, user_id)
);